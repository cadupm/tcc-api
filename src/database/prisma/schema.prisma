// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MentorshipInvite {
  pending
  accepted
  refused
}

enum UserRole {
  student
  teacher
}

model User {
  id              String               @id @default(uuid()) @db.Uuid
  name            String               
  email           String               @unique
  roles           UserRole[]
  password        String              
  profileImage    String?
  expertise       String?
  bio             String?
  gitHubLink      String?
  linkedinLink    String?
  contact         String?
  student         Student?
  teacher         Teacher?
  createdAt       DateTime             @default(now()) @map("created_at")
  updatedAt       DateTime             @updatedAt @map("updated_at")
  @@map("user")
}

model Student {
  id                  String               @id @default(uuid()) @db.Uuid
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String               @db.Uuid @unique
  registration        String               
  mentorship          Mentorship?
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  @@map("student")
}

model Teacher {
  id                  String               @id @default(uuid()) @db.Uuid
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String               @db.Uuid @unique
  registration        String               
  mentorship          Mentorship[]
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  @@map("teacher")
}

model Mentorship {
  id                      String               @id @default(uuid()) @db.Uuid
  student                 Student              @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId               String               @db.Uuid @unique
  teacher                 Teacher              @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId               String               @db.Uuid
  isInvitationAccepted    MentorshipInvite     @default(pending)
  submissions             Submission[]
  reviews                 Review[]
  createdAt               DateTime             @default(now()) @map("created_at")
  updatedAt               DateTime             @updatedAt @map("updated_at")
  @@map("mentorship")
}


model Submission {
  id                      Int               @id @default(autoincrement())
  description             String
  notReviewed             Boolean           @default(true)
  mentorship              Mentorship        @relation(fields: [mentorshipId], references:[id], onDelete: NoAction)
  mentorshipId            String            @db.Uuid
  filesUrl                String[]
  reviews                 Review[]
  createdAt               DateTime          @default(now()) @map("created_at")
  updatedAt               DateTime          @updatedAt @map("updated_at")
  @@map("submission")
}

model Review {
  id                      Int               @id @default(autoincrement())
  comment                 String
  submission              Submission        @relation(fields: [submissionId], references:[id], onDelete: Cascade)
  submissionId            Int            
  mentorship              Mentorship        @relation(fields: [mentorshipId], references:[id], onDelete: NoAction)
  mentorshipId            String            @db.Uuid
  metrics                 Metric[]
  createdAt               DateTime          @default(now()) @map("created_at")
  updatedAt               DateTime          @updatedAt @map("updated_at")
  @@map("review")
}

model Metric {
  id                      Int               @id @default(autoincrement())
  name                    String
  description             String
  review                  Review            @relation(fields: [reviewId], references:[id], onDelete: Cascade)
  reviewId                Int            
  createdAt               DateTime          @default(now()) @map("created_at")
  updatedAt               DateTime          @updatedAt @map("updated_at")
  @@map("metric")
}